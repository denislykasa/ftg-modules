# requires: captcha-solver

from time import time, strftime
from random import randint
import logging
import asyncio
from io import BytesIO

from math import floor
from datetime import timedelta

from telethon import types
from captcha_solver import CaptchaSolver
from .. import loader, utils

logger = logging.getLogger("AutoLesya")

lesya = 757724042  # ID –±–æ—Ç–∞
lesya_chat = -489442634

BITCOIN_FARM_PRICE = 80000000

times = {
	"bonus": 0,
	"vip_bonus": 0,
	"premium_bonus": 0,
	"premium_money": 0,

	"work": 0,
	"fight": 0,

	"opencase": 0,

	"progress": 0,
	"progress_collect": 0,

	"pet_bitcoin": 0,
	"pet_stimulator": 0,
	"pet_food": 0,
	"pet_cases": 0,

	"clan_war": 0,
	"clan_war_upgrade": 0,
	"clan_heist": 0,

	"trade": 0,
	"cup": 0,
	"casino": 0,

	"humanizer": 0
}

sleep_hours = {} # {"sleep": [0, 9]}

cooldowns = {
	"bonus": 60,

	"work": 10,
	"fight": 5,

	"opencase": 60,

	"trade": 5,
	"cup": 5,
	"casino": 5,

	"humanizer": 1800,

	"etc": 10,
}

cooldowns_hints = {
	"bonus": "üîî –ë–æ–Ω—É—Å",
	
	"work": "üëî –†–∞–±–æ—Ç–∞",
	"fight": "ü§∫ –ë–æ–∏",

	"opencase": "üß≥ –ú–µ–∂–¥—É –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –∫–µ–π—Å–æ–≤",

	"trade": "üîß –ê–≤—Ç–æ-—Ç—Ä–µ–π–¥",
	"cup": "ü•§ –ê–≤—Ç–æ-—Å—Ç–∞–∫–∞–Ω",
	"casino": "üé∞ –ê–≤—Ç–æ-—Å–∞–∑–∏–Ω–æ",

	"humanizer": "üó£Ô∏è –†–∞–Ω–¥–æ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É",

	"etc": "üìù –û—Å—Ç–∞–ª—å–Ω–æ–µ"
}

humanizer_phrases = [
	"–ö–ª–∞–Ω",
	"–ö–≤",
	"–ì–æ—Ä–æ–¥",
	"–ì–æ—Ä–æ–¥ —Å—Ç–∞—Ç",
	"–ì–æ—Ä–æ–¥ —Å–∫–ª–∞–¥ –ø—Ä–æ–¥–∞—Ç—å",
	"–ì–æ—Ä–æ–¥ –±–∞–Ω–∫ —Å–Ω—è—Ç—å",
	"–ë–∞–ª–∞–Ω—Å",
	"–ë–∞–Ω–∫",
	"–ü–∏—Ç–æ–º—Ü—ã",
	"–ö–µ–π—Å—ã",
	"–ö—É—Ä—Å",
	"–†–µ–π—Ç–∏–Ω–≥",
	"–ö–ª–∞–Ω—ã",
	"–ê–Ω–µ–∫–¥–æ—Ç",
	"–ü–†–ò–ú–ï–†",
	"–ö–∞–∑–∏–Ω–æ 1000",
	"–°—Ç–∞–∫–∞–Ω 1 1000",
	"–°—Ç–∞–∫–∞–Ω 2 1000",
	"–°—Ç–∞–∫–∞–Ω 3 1000",
	"–ó–∞–≥–∞–¥–∫–∞",
	"–°–¥–∞—é—Å—å",
	"–ë–∏–∑–Ω–µ—Å —Å–Ω—è—Ç—å 1",
	"–ë–∏–∑–Ω–µ—Å —Å–Ω—è—Ç—å 2",
	"‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
	"üíé –û—Å–Ω–æ–≤–Ω–æ–µ",
	"üìí –ü—Ä–æ—Ñ–∏–ª—å",
	"üí≤ –ë–∞–ª–∞–Ω—Å",
	"üëë –†–µ–π—Ç–∏–Ω–≥",
	"üõç –ú–∞–≥–∞–∑–∏–Ω",
	"‚óÄÔ∏è –í —Ä–∞–∑–¥–µ–ª ¬´–û—Å–Ω–æ–≤–Ω–æ–µ¬ª",
	"üèÜ –¢–æ–ø",
	"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
	"üéâ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
	"üöÄ –ò–≥—Ä—ã",
	"‚ùì –ü–æ–º–æ—â—å",
	"üõ° –ö–ª–∞–Ω—ã",
	"üêπ –ü–∏—Ç–æ–º—Ü—ã",
	"üí∞ –ö–æ–º–∞–Ω–¥—ã –±–∞–Ω–∫–∞",
	"üåÜ –ú–æ–π –≥–æ—Ä–æ–¥",
	"üíº –ë–∏–∑–Ω–µ—Å",
	"‚õè –†—É–¥–Ω–∏–∫",
	"üì¶ –ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞",
	"üëî –†–∞–±–æ—Ç–∞",
	"üì¶ –ö–µ–π—Å—ã"
]

math_examples = [
	"+",
	"-",
	"*",
	"/"
]

stats = {}

formats = {
	"bonus": ("–±–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω", "–±–æ–Ω—É—Å —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω", "—Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å", "—Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å v.i.p –±–æ–Ω—É—Å", "—Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å premium –±–æ–Ω—É—Å"),
	"bonus_money": "–ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª—é—Ç—É –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑",

	"work": "—Ä–∞–±–æ—Ç–∞ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑",
	"work_new": "üí° –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞!",

	"id": "üîé ID: ",
	"status": "üíé —Å—Ç–∞—Ç—É—Å:",
	"bitcoin_farms": "üîã –±–∏—Ç–∫–æ–∏–Ω —Ñ–µ—Ä–º–∞: ",

	"banned": " –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã "
}

settings_tip = {
	"fight": "ü§∫ –ë–æ–π",
	"work": "üëî –†–∞–±–æ—Ç–∞",
	"bonus": "üîî –ë–æ–Ω—É—Å",

	"opencase": "üß≥ –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–æ–≤",

	"progress": "üöß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–∫—É–ø—ã",

	"pet_bitcoin": "üÖ±Ô∏è –°–±–æ—Ä –±–∏—Ç–∫–æ–∏–Ω–æ–≤ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π",
	"pet_stimulator": "üíä –°—Ç–∏–º—É–ª—è—Ç–æ—Ä –ø–∏—Ç–æ–º—Ü–µ–≤",
	"pet_food": "ü•´ –ö–æ—Ä–º –ø–∏—Ç–æ–º—Ü–µ–≤",
	"pet_cases": "üíº –ú–Ω–æ–∂–∏—Ç–µ–ª—å –∫–µ–π—Å–æ–≤ –ø–∏—Ç–æ–º—Ü–µ–≤",
	#"pet_helper": "üìë –†–∞—Å—á—ë—Ç –ª—É—á—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞",

	"clan_war": "‚öîÔ∏è –ö–ª–∞–Ω–æ–≤—ã–µ –≤–æ–π–Ω—ã",
	"clan_heist": "üî´ –û–≥—Ä–∞–±–ª–µ–Ω–∏–µ",
	"clan_buy": "üí∏ –ó–∞–∫—É–ø –¥–ª—è –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è",

	"auto_trade": "üîß –¢—Ä–µ–π–¥ –Ω–∞ –≤—Å—ë",
	"auto_cup": "ü•§ –°—Ç–∞–∫–∞–Ω –Ω–∞ –≤—Å—ë",
	"auto_casino": "üé∞ –ö–∞–∑–∏–Ω–æ –Ω–∞ –≤—Å—ë",

	"humanizer": "üó£Ô∏è –†–∞–Ω–¥–æ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É"
}

settings_phrases = {
	"captcha_pidors": "–†–µ–ø–æ—Ä—Ç —É –º–µ–Ω—è –∫–∞–ø—á—É –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç"
}

phrases_tips = {
	"captcha_pidors": "–ï—Å–ª–∏ –¥–∞—É–Ω–∏—á–∏ –ø—Ä–∏—à–ª—é—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–ø—á"
}

settings = {}

allowed_commands = [ # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∫–æ–Ω—Ñ—ã
	"–ø—Ä–æ—Ñ–∏–ª—å",
	"–±–∞–ª–∞–Ω—Å",
	"–±–∞–Ω–∫",

	"–≥–µ—Ç",

	"–∫–ª–∞–Ω—ã",
	"–∫–ª–∞–Ω",
	"–∫–ª–∞–Ω –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å *",

	"–≥–æ—Ä–æ–¥",
	"–≥–æ—Ä–æ–¥ —Å–∫–ª–∞–¥ –ø—Ä–æ–¥–∞—Ç—å",
	"–≥–æ—Ä–æ–¥ –∫–∞–∑–Ω–∞ —Å–Ω—è—Ç—å",

	"–∫–≤",
	"–∫–≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏",

	"–æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ",
	"–æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏"
]

def convert(str_):
	arr = str_.split(":")
	last = len(arr)
	try:
		if last == 4:  # D:H:M:S
			return int(arr[0][:2]) * 86400 + int(arr[1][:2]) * 3600 + int(arr[2][:2]) * 60 + int(arr[3][:2])
		elif last == 3:  # H:M:S
			return int(arr[0][:2]) * 3600 + int(arr[1][:2]) * 60 + int(arr[2][:2])
		elif last == 2:
			return int(arr[0][:2]) * 60 + int(arr[1][:2])
		else:
			return int(arr[0][:2])
	except ValueError:
		logger.error(f"CONVERT ERROR WHILE PARSING {str_!r}")
		return -1

def convert_money(money):
	money = money.replace(".", "")
	money = money.replace("‚Çø", "")
	money = money.replace("+", "")
	money = int(money[:-1])
	return money

def timetostr(tmp):
	if tmp <= 0:
		return "–ì–æ—Ç–æ–≤–æ"
	return str(timedelta(seconds=floor(tmp)))

best_settings = {
	"fight": True,
	"work": True,
	"bonus": True,
	"opencase": True,
	"progress": True,
	"pet_bitcoin": True,
	#"pet_stimulator": True,
	#"pet_food": True,
	#"pet_cases": True,
	"clan_buy": True,
	"humanizer": True
}


@loader.tds
class AutoLesyaMod(loader.Module):
	"""–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è LesyaBot"""
	strings = {"name": "LesyaBot"}

	def gen_time(self, mode="etc"):
		time = cooldowns.get(mode)
		if time is None:
			time = 10
		return randint(0, time)

	async def send_bot(self, text):
		# await asyncio.sleep(randint(0, self.db_get("cooldown_time", 10)))
		await self._client.send_message(lesya, text)

	async def send_group(self, text):
		await self._client.send_message(lesya_chat, text)

	def set_time(self, time_name, entry):
		global times
		times[time_name] = entry
		self.db_set("time_" + time_name, entry)

	def bot_loaddb(self):
		# –ü–æ–¥–≥—Ä—É–∑–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
		global lesya_chat
		lesya_chat = self.db_get("chat_id", 1462806544) or lesya_chat
		global times
		for time_name in times:
			last = self.db_get("time_" + time_name, 0)
			times[time_name] = last
		# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ lsettings
		global settings
		for cmd in settings_tip:
			has = self.db_get(cmd)
			settings[cmd] = has
		# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É–ª–ª–¥–∞—É–Ω–æ–≤
		global cooldowns
		for mode in cooldowns:
			wait = self.db_get("cooldown_" + mode)
			if wait is None:
				continue
			cooldowns[mode] = wait
		# –í—Ä–µ–º—è —Å–Ω–∞
		global sleep_hours
		sleep = self.db_get("sleep_hours")
		if sleep:
			sleep_hours = sleep
		global settings_phrases
		for phrase in settings_phrases:
			text = self.db_get("phrase_" + phrase)
			if text is None:
				continue
			settings_phrases[phrase] = text

	def gen_phrase(self):
		phrase_id = randint(0, len(humanizer_phrases) - 1)
		phrase = humanizer_phrases[phrase_id]
		if phrase == "–ü–†–ò–ú–ï–†":
			phrase = "–†–µ—à–∏ "
			spaces = randint(0, 1) == 1 and "" or " "
			for i in range(randint(1, 5)):
				first = str(randint(0, 1000000))
				second = str(randint(0, 1000000))
				action = math_examples[randint(0, len(math_examples) - 1)]
				start = action
				if i == 0:
					start = ""
				phrase = phrase + start + first + spaces + action + spaces + second + spaces
		return phrase

	def send_phrase(self):
		phrase = self.gen_phrase()
		if randint(0, 1) == 1:
			phrase = phrase.lower()
		asyncio.ensure_future(self.send_bot(phrase))
	
	def solver(self, data):
		logger.info("–ü–æ–ª—É—á–∞—é –∫–ª—é—á")
		key = self.db_get("api_token")
		logger.info("–ü–æ–ª—É—á–∏–ª –∫–ª—é—á")
		func = CaptchaSolver("rucaptcha", api_key=key).solve_captcha
		logger.info("–°–æ–∑–¥–∞–ª —Ñ—É–Ω–∫—Ü–∏—é")
		return func(data)

	async def client_ready(self, client, db):
		self._me = await client.get_me()
		self._client = client
		self._id = self._me.id
		self._db = db
		self.bot_loaddb()
		asyncio.ensure_future(self.timer())

	async def lsetchatcmd(self, message):
		global lesya_chat
		lesya_chat = message.chat.id
		self.db_set("chat_id", lesya_chat)
		await utils.answer(message, "–≠—Ç–∞ –±–µ—Å–µ–¥–∞ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –∫–∞–∫ —á–∞—Ç –∫–ª–∞–Ω–∞")

	async def ltestchatcmd(self, message):
		try:
			await self._client.send_message(lesya_chat, "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞—Ç–∞")
			await utils.answer(message, "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
		except:
			await utils.answer(message, "–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ, —É–∫–∞–∑–∞–Ω —á–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")

	async def lcmdcmd(self, message):
		"""–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞"""
		if message.chat.id != lesya_chat:
			return
		cmd = utils.get_args_raw(message) or ""
		text = cmd.lower()
		allow = False
		for word in allowed_commands:
			last = word[-1:]
			if last == "*":
				check_len = len(word) - 1
				sub = word[:check_len]
				msg_sub = text[:check_len]
				if sub == msg_sub:
					allow = True
			elif text == word:
				allow = True
		if not allow:
			await utils.answer(message, "–ö—ã—à")
			return
		await utils.answer(message, cmd)

	async def lbotreadycmd(self, message):
		"""–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥ –±–æ—Ç–∞"""
		api_token = utils.get_args_raw(message)
		if not api_token:
			await utils.answer(message, "<b>–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω RuCaptcha</b>\n–í–¥—Ä—É–≥ –∫–∞–ø—á–∞ –ø—Ä–∏–ª–µ—Ç–∏—Ç")
			return
		
		for func in best_settings:
			should = best_settings.get(func)
			self.settings_set(func, should)

		self.db_set("api_token", api_token)

		await utils.answer(message, "<b>–ü—Ä–∏–º–µ–Ω–µ–Ω—ã –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –±–æ—Ç-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>")

	async def setcaptchatokencmd(self, message):
		"""–£–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω RuCaptcha"""
		api_token = utils.get_args_raw(message)
		self.db_set("api_token", api_token)
		await utils.answer(message, "<b>–ï—Å—Ç—å!</b>")

	async def getcaptchatokencmd(self, message):
		"""–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω RuCaptcha"""
		token = self.db_get("api_token", "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
		await utils.answer(message, token)

	def set_cooldown(self, mode, seconds):
		global cooldowns
		cooldowns[mode] = seconds
		self.db_set("cooldown_" + mode, seconds)

	async def lcooldowncmd(self, message):
		"""–£–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏"""
		text = utils.get_args_raw(message)
		if not text:
			reply = "<b>‚åõ –ò–Ω—Ñ–æ–º–∞—Ü–∏—è –æ –∑–∞–¥–¥–µ—Ä–∂–∫–∞—Ö</b>"
			for cd in cooldowns:
				name = cooldowns_hints.get(cd) or "Unknown"
				wait = cooldowns.get(cd) or 0
				reply = reply + "\n<b>" + name + "</b> ( <code>" + cd + "</code> ) - " + timetostr(wait)

			reply = reply + "\n\n<b>üí¨ –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–≤–µ–¥–∏—Ç–µ</b> <code>.lcooldown type time</code>"
			await utils.answer(message, reply)
			return
		args = text.rsplit(" ", 1)
		mode = args[0]
		if len(args) != 2 or not mode in cooldowns:
			await utils.answer(message, "<b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! .lcooldown type seconds</b>")
			return
		time = args[1]
		try:
			cd_time = int(time)
		except ValueError:
			await utils.answer(message, "<b>–û—à–∏–±–∫–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞ \"s\", –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ –≤—Ç–æ—Ä—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º)</b>")
			return
		if cd_time < 0:
			await utils.answer(message, "<b>–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–≤–Ω–æ 0 –∏–ª–∏ –±–æ–ª—å—à–µ</b>")
			return
		self.set_cooldown(mode, cd_time)
		await utils.answer(message, "<b>–ï—Å—Ç—å!</b>")

	async def lsleepcmd(self, message):
		"""–í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞. –ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - –¥–∞—ë—Ç –∏–Ω—Ñ—É"""
		global sleep_hours
		text = utils.get_args_raw(message) or ""
		args = text.rsplit(" ", 2)
		if not args or not args[0]:
			reply = "<b>üò¥ –í—Ä–µ–º—è —Å–Ω–∞. –°–µ–π—á–∞—Å - " + str(strftime("%H")) + "</b>"
			for name in sleep_hours:
				hours = sleep_hours.get(name)
				reply = reply + "\n‚è∞ <code>" + name + "</code>: " + str(hours[0] or 0) + "—á -> " + str(hours[1] or 0) + "—á"
			reply = reply + "\n\n<b>–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ - </b><code>.lsleep –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å_–Ω–∞—á–∞–ª–æ —á–∞—Å_–∫–æ–Ω–µ—Ü</code>\n<b>–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è - </b><code>.lsleep –Ω–∞–∑–≤–∞–Ω–∏–µ</code>"
			await utils.answer(message,reply)
		elif len(args) == 3: # –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü
			name = args[0]
			if sleep_hours.get(name):
				await utils.answer(message, "–¢–∞–∫–æ–µ –∏–º—è —É–∂–µ –µ—Å—Ç—å")
				return
			try:
				hour_start = int(args[1])
				hour_end = int(args[2])
			except:
				await utils.answer(message, "–ß–∞—Å—ã –æ—Ç–¥—ã—Ö–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∫–∞–∑–∞–Ω—ã —á–∏—Å–ª–æ–º")
				return
			if hour_start >= hour_end:
				await utils.answer(message, "–ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –≤—Ç–æ—Ä–æ–≥–æ ( 4, 7 - –æ—Ç–¥—ã—Ö –æ—Ç 4 –¥–æ 7 —É—Ç—Ä–∞ )")
				return
			sleep_hours[name] = [hour_start, hour_end]
			self.db_set("sleep_hours", sleep_hours)
			await utils.answer(message, "–í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
		elif len(args) == 1:
			name = args[0]
			if not sleep_hours.get(name):
				await utils.answer(message, "–¢–∞–∫–æ–≥–æ –∏–º–µ–Ω–∏ –Ω–µ—Ç—É")
				return
			del sleep_hours[name]
			self.db_set("sleep_hours", sleep_hours)
			await utils.answer(message, "–í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ —É–¥–∞–ª–µ–Ω–æ")
		else:
			await utils.answer(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. <code>.lsleep –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å_–Ω–∞—á–∞–ª–æ —á–∞—Å_–∫–æ–Ω–µ—Ü</code>")

	def phrases_set(self, phrase, text):
		global settings_phrases
		settings_phrases[phrase] = text
		self.db_set("phrase_" + phrase, text)

	async def lphrasescmd(self, message):
		"""–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏"""
		text = utils.get_args_raw(message) or ""
		args = text.split(" ", 1)
		has_phrase = settings_phrases.get(args[0])
		if not args or len(args) < 2 or not has_phrase: # –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ / –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
			reply = "<b>üí¨ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ—Ä–∞–∑</b>"
			for name in settings_phrases:
				value = settings_phrases.get(name)
				reply = reply + "\n<code>" + name + "</code> (<code>" + phrases_tips.get(name) + "</code>) - <code>" + value + "</code>" 
			await utils.answer(message, reply)
		elif len(args) == 2 and has_phrase:
			self.phrases_set(args[0], args[1])
			await utils.answer(message, "<code>" + args[0] + "</code> - <code>" + args[1] + "</code>")

	def settings_set(self, name, var):
		global settings
		settings[name] = var
		self.db_set(name, var)

	async def lsettingscmd(self, message):
		"""–ù–∞—Å—Ç—Ä–æ–π–∫–∏ LesyaBot"""
		text = utils.get_args_raw(message)
		reply = ""
		if not text or not settings_tip.get(text):
			reply = "‚öôÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>"
			for cmd in settings_tip:
				enabled = self.db_get(cmd) and "‚ôøÔ∏è" or ""
				description = settings_tip[cmd]
				reply = reply + "\n" + enabled + description + " - <code>" + cmd + "</code>"

			reply = reply + "\n\n" + "<b>‚ôø - –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞\n–§—É–Ω–∫—Ü–∏–∏ —Å –ø—Ä–∏–ø–∏—Å–∫–æ–π</b>\n\n<b>–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–≤–∫–ª—é—á–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ</b> <code>.lsettings var_name</code>"
		else:
			description = settings_tip.get(text)
			should = not settings.get(text)
			reply = description + " - <b>" + (should and "–í–∫–ª—é—á–µ–Ω–æ" or "–û—Ç–∫–ª—é—á–µ–Ω–æ") + "</b>"
			self.settings_set(text, should)
			
		await utils.answer(message, reply)

	async def solvecmd(self, message):
		"""–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏"""
		await utils.answer(message, "–ñ–¥—ë–º –æ—Ç–≤–µ—Ç–∞...")
		x = await self.solve_captcha(await message.get_reply_message())
		await utils.answer(message, ("–û—Ç–≤–µ—Ç: "+str(x)) if x else "<b>–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á —Å –ø–æ–º–æ—â—å—é .setcaptchatoken</b>")

	async def lesyainfocmd(self, message):
		"""–ò–Ω–æ—Ñ—Ä–º–∞—Ü–∏—è –æ —Å–∫—Ä–∏–ø—Ç–µ –∏ –∏–Ω—Ñ–µ, –∫–∞–∫—É—é —Å–æ–±—Ä–∞–ª"""
		if times.get("banned", None):
			now = time()
			wait = times.get("banned") - now
			await utils.answer(message, "<b>–Ø –≤ –±–∞–Ω–µ\n–û—Å—Ç–∞–ª–æ—Å—å: " + timetostr(wait) + "</b>")
			return
		elif not stats.get("has", None):
			await utils.answer(message, "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>")
			return

		now = time()
		text = "<b>–ò–Ω—Ñ–∞ –≤ –ë–æ—Ç –õ–µ—Å—è</b>" + "\n" \
			"‚ò∫Ô∏è –ú–æ–π –∞–π–¥–∏ - <code>" + str(stats.get("id")) + "</code>\n" \
			"ü§î –°—Ç–∞—Ç—É—Å: " + (stats.get("premium") and "Premium" or stats.get("vip") and "VIP" or "–ò–≥—Ä–æ–∫") + "\n" \
			"üë®‚Äçüë¶‚Äçüë¶ –ö–ª–∞–Ω: " + (stats.get("clan") and "–ï—Å—Ç—å" or "–ù–µ—Ç—É") + "\n" \
			"üí≥ –î–µ–Ω—å–≥–∏: " + "{:0,}".format(stats.get("money", 0)) + "$" + "\n" \
			"üÖ±Ô∏è –ë–∏—Ç–∫–æ–∏–Ω—ã: " + "{:0,}".format(stats.get("bitcoin", 0)) + "BTC" + "\n" \
			"üíª –§–µ—Ä–º—ã: " + "{:0,}".format(stats.get("bitcoin_farms", 0)) + "\n\n" \
			"<b>–ò–Ω—Ñ–∞ –ø–æ —Ç–∞–π–º–∏–Ω–≥–∞–º</b>" + "\n" \
			"üí∞ –ë–æ–Ω—É—Å: " + timetostr(times.get("bonus") - now) + "\n"
		if stats.get("vip"):
			text = text + "üí≥ –í–∏–ø –±–æ–Ω—É—Å: " + timetostr(times.get("vip_bonus") - now) + "\n"
		if stats.get("premium"):
			text = text + "üí∏ –ü—Ä–µ–º–∏—É–º –±–æ–Ω—É—Å: " + timetostr(times.get("premium_bonus") - now) + "\n"
			text = text + "ü§ë –ü—Ä–µ–º–∏—É–º –≤–∞–ª—é—Ç–∞: " + timetostr(times.get("premium_money") - now) + "\n"
		text = text + "üõ†Ô∏è –†–∞–±–æ—Ç–∞: " + timetostr(times.get("work") - now) + "\n"
		battle = times.get("fight") - now
		if battle < 10**50:
			text = text + "ü§∫ –ë–æ–∏: " + timetostr(battle) + "\n"
		if settings.get("progress"):
			text = text = text + "üÖ±Ô∏è –°–±–æ—Ä –±–∏—Ç–∫–æ–∏–Ω–æ–≤: " + timetostr(times.get("progress_collect") - now) + "\n"
		if settings.get("pet_stimulator"):
			text = text + "üíä –°—Ç–∏–º—É–ª—è—Ç–æ—Ä—ã: " + timetostr(times.get("pet_stimulator") - now) + "\n"
		if settings.get("pet_food"):
			text = text + "ü•´ –ö–æ—Ä–º: " + \
				timetostr(times.get("pet_food") - now) + "\n"
		if settings.get("pet_cases"):
			text = text + "üíº –ú–Ω–æ–∂–∏—Ç–µ–ª—å –∫–µ–π—Å–æ–≤: " + timetostr(times.get("pet_cases") - now) + "\n"
		if settings.get("opencase"):
			text = text + "üß≥ –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞: " + timetostr(times.get("opencase") - now) + "\n"
		if settings.get("clan_war"):
			text = text + "‚öîÔ∏è –ö–ª–∞–Ω–æ–≤–∞—è –≤–æ–π–Ω–∞: " + timetostr(times.get("clan_war") - now) + "\n"
			if times.get("clan_war_upgrade") != 0:
				text = text + "ü¶Ω –ê–ø–≥—Ä–µ–π–¥ –ø–∏—Ç–æ–º—Ü–µ–≤: " + timetostr(times.get("clan_war_upgrade") - now) + "\n"
		if settings.get("clan_heist"):
			text = text + "üî´ –û–≥—Ä–∞–±–ª–µ–Ω–∏–µ: " + timetostr(times.get("clan_heist") - now) + "\n"
		if settings.get("humanizer"):
			text = text + "üó£Ô∏è –•—É–º–∞–Ω–∞–π–∑–µ—Ä: " + timetostr(times.get("humanizer") - now) + "\n"
		hour = int(strftime("%H"))
		for sleep_name in sleep_hours:
			hours = sleep_hours.get(sleep_name)
			if hour >= hours[0] and hour <= hours[1]:
				text = text + "üò¥ <b>–°–µ–π—á–∞—Å —Å–ø–ª—é ( " + sleep_name + " ). –ï—â—ë " + str(hours[1] - hour) + "—á</b>"
		if self.db_get("api_token") == None:
			text = text + "‚ö†Ô∏è <b>–¢–æ–∫–µ–Ω –∫–∞–ø—á–∏ –Ω–µ —É–∫–∞–∑–∞–Ω</b>"
		await utils.answer(message, text)

	async def solve_captcha(self, message):
		if not self.solver:
			logger.info("no self.solver")
			return
		logger.info("creating io data")
		file_loc = BytesIO()
		logger.info("downloading file")
		logger.info(message)
		await message.download_media(file_loc)
		logger.info("geting value from file")
		bytes_ = file_loc.getvalue()
		logger.info("solving with self.solver")
		return self.solver(bytes_)

	async def parseprofile(self, text):
		global stats
		lines = text.split("\n")
		stats["has"] = True
		for line in lines:
			if formats.get("id") in line:
				line = line.replace(formats.get("id"), "")
				stats["id"] = line.rsplit(" ", -1)[0]
				asyncio.ensure_future(self.send_bot(line.rsplit(" ", -1)[0]))
			elif formats.get("status") in line:
				stats["premium"] = "premium" in line
				stats["vip"] = "—Å—Ç–∞—Ç—É—Å: v.i.p" in line or "—Å—Ç–∞—Ç—É—Å: premium" in line
			elif formats.get("bitcoin_farms") in line:
				line = line.replace(formats.get("bitcoin_farms"), "")
				amount = line.replace(" ", "")
				amount_start = amount.find("(")
				amount_end = amount.find(")", amount_start)
				amount = amount[amount_start+2:amount_end]
				stats["bitcoin_farms"] = int(amount)
			
		stats["work"] = "—Ä–∞–±–æ—Ç–∞:" in text
		stats["clan"] = "–∫–ª–∞–Ω:" in text
			
		logger.info("Got profile")
		asyncio.ensure_future(self.send_bot("–ë–∞–ª–∞–Ω—Å"))

	def parsebonus(self, text):
		logger.info("parsing bonus")
		logger.info(text)
		global times
		vip = "v.i.p" in text
		premium = "premium" in text
		bonus_type = vip and "vip_bonus" or premium and "premium_bonus" or "bonus"
		now = time()

		timestr = text.rsplit(" ", 2)
		if ":" not in (timestr[-1]):
			timestr.pop(-1)
		need = convert(timestr[-1])
		self.set_time(bonus_type, now + need + 30)
		logger.info("before bonus need to wait " + str(need))

	def parsemoneybonus(self, text):
		logger.info("parsing money bonus")
		logger.info(text)
		global times
		now = time()

		timestr = text.rsplit(" ", 2)
		if ":" not in (timestr[-1]):
			timestr.pop(-1)
		need = convert(timestr[-1])
		self.set_time("premium_money", now + need + 30)
		logger.info("before money bonus need to wait " + str(need))

	def parsejob(self, text):  # –≤—Ä–µ–º—è –¥–ª—è —Ä–∞–±–æ—Ç—ã
		global times
		now = time()
		lines = text.split("\n")

		for line in lines:
			if not formats.get("work") in line:
				continue
			timestr = line.rsplit(" ", 1)[1]
			need = convert(timestr)
			self.set_time("work", now + need + self.gen_time("work"))
			logger.info("before work need to wait " + str(need))

	def parse_last_entry(self, text):
		last = "1"
		lines = text.split("\n")
		for line in lines:
			dot = line.find(".")
			if line[:1] == "üîπ" and dot != -1:
				last = line[2:dot]
		return str(last)

	def parsenewjob(self, text):
		last = self.parse_last_entry(text)
		asyncio.ensure_future(self.send_bot("–†–∞–±–æ—Ç–∞ " + last))
		

	def parsefights(self, text):
		global times
		if not "–ª–µ—á–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–µ–≤" in text:
			return False
		logger.info("Tring to parse fight time")
		lines = text.split("\n")
		times_ = []
		for _ in range(len(lines)):
			if "–ª–µ—á–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–µ–≤" in lines[0]:
				lines.pop(0)
				break
			lines.pop(0)
		for line in lines:
			if ":" in line:
				timestr = line.rsplit(" ", 1)[1]
				if ":" in timestr:
					val = convert(timestr)
					times_.append(val if val else 0)
		logger.info("Calculated fight time")
		self.set_time("fight", time() + max(times_) + 2 + self.gen_time("fight"))
		return len(times_) > 0

	def get_bitcoins(self):
		now = time()
		if not settings.get("pet_bitcoin") or times.get("pet_bitcoin") > now:
			return
		self.set_time("pet_bitcoin", now + 60 * 61)
		asyncio.ensure_future(self.send_bot("–§–µ—Ä–º–∞"))

	def war_parsepoints(self, text):
		text = text.lower()
		lines = text.split("\n")
		max_upgrade = 16
		pets = {}
		points = 0
		for line in lines:
			logger.info(line)
			if "–¥–æ—Å—Ç—É–ø–Ω–æ –æ—á–∫–æ–≤ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π:" in line:
				logger.info("found line")
				pos = line.find(":")
				points = line[pos + 2:]
				logger.info(points)
				points = int(points)
			elif "üíé" in line and "/" in line:
				start = line.find("‚≠ê")
				end = line.find("/")
				has = line[start+1:end]
				has = int(has)
				pets[len(pets) + 1] = has
		test = []
		for pet in pets:
			has = pets[pet]
			pet = str(pet)
			if has == max_upgrade:
				continue
			for up_id in range(max_upgrade - has):
				if points <= 0:
					break
				upgrade = has + up_id + 1
				to_send = "–ö–≤ —É–ª—É—á—à–∏—Ç—å " + pet + " " + str(upgrade)
				points -= 1
				test.append(to_send)
		return test
	
	async def war_usepoints(self, text):
		info = self.war_parsepoints(text)
		for st in info:
			await self.send_bot(st)

	def case_parse(self, text):
		text = text.replace("<strong>‚Ññ", "")
		text = text.replace("</strong>", "")
		lines = text.split("\n")

		for line in lines:
			if not "üîπ" in line or not "¬ª" in text:
				continue
			if line[1] != "üîπ":
				continue
			dot = line.find(" ¬ª")
			case_id = line[3:dot]
			return case_id

	def solving_captcha(self, bool):
		global stats
		stats["captcha"] = bool

	def pets_parse(self, text):
		allow = {
			"0": True,
			"1": True,
			"2": True,
			"3": True,
			"4": True,
			"5": True,
			"6": True,
			"7": True,
			"8": True,
			"9": True,
		}
		arr = stats.get("pets_parsed") or []

		text = text.replace("üîü", "10")
		text = text.replace("‚É£", "")
		text = text.replace(".", "")
		lines = text.split("\n")
		for line in lines:
			if not "|" in line:
				continue
			pet_id = ""
			for i in range(4):
				char = line[i]
				if allow.get(char):
					pet_id = pet_id + char
			hp_start = line.find("‚ù§Ô∏è")
			hp_end = line.find("|", hp_start)
			hp = line[hp_start+3:hp_end]
			dmg = 0
			if "üí¢" in line:
				dmg_start = line.find("üí¢")
				dmg_end = line.find("|", dmg_start)
				if dmg_end == -1:
					dmg = line[dmg_start+2:]
				else:
					dmg = line[dmg_start+2:dmg_end]
			mgc = 0
			if "üßø" in line:
				mgc_start = line.find("üßø")
				mgc_end = line.find("|", mgc_start)
				if mgc_end == -1:
					mgc = line[mgc_start+2:]
				else:
					mgc = line[mgc_start+2:mgc_end]
			arr.append({"ID": pet_id, "HP": int(hp), "DMG": floor(int(dmg) + int(mgc) * 1.1)})
		arr.sort(key=lambda x: x.get("DMG"), reverse=True)
		return arr

	async def lpetscmd(self, message):
		"""–°–ø–∏—Å–æ–∫ –ø–∏—Ç–æ–º—Ü–µ–≤. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É—Ä–æ–Ω—É"""
		global stats
		if not stats.get("has"):
			asyncio.ensure_future(utils.answer(message, "–ù–µ—Ç—É –∏–Ω—Ñ—ã –æ –ø—Ä–æ—Ñ–∏–ª–µ"))
			return
		stats["pets_waiting"] = message
		stats["pets_parsed"] = []
		asyncio.ensure_future(utils.answer(message, "–ñ–¥—É –∏–Ω—Ñ—É –æ—Ç –±–æ—Ç–∞"))
		asyncio.ensure_future(self.send_bot("–ü–∏—Ç–æ–º—Ü—ã"))

	async def receive(self, message):  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞
		global times
		global stats
		text = message.text.lower()
		now = time()
		if not text:
			return
		if "[üíé] premium" in text:
			text = text.replace("[üíé] ", "")
		# –ò–Ω—Ñ–∞ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
		if "–≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å" in text:  # –ò–Ω—Ñ–∞ –ø–æ –ø—Ä–æ—Ñ–∏–ª—é –ø—Ä–∏–≤–µ—Ç
			await self.parseprofile(text)

		if formats.get("banned") in text and not times.get("banned", None):
			logger.info("banned. Getting time")
			skip = len(formats.get("banned"))
			lines = text.split("\n")
			line = lines[0]
			reason = len(lines) > 1 and lines[1] or "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
			if "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞" in text:
				stats["permaban"] = True
				need = 24 * 3600 * 7
				asyncio.ensure_future(self._client.send_message(lesya_chat, "#ban\n<b>üö´ –Ø —É–ª–µ—Ç–µ–ª –≤ –±–∞–Ω –ø–∞—Ä–º–æ–π.</b>\n" + reason))
			else:
				need = convert(line[2+skip+1:])
				asyncio.ensure_future(self._client.send_message(lesya_chat, "#ban\n<b>üö´ –Ø —É–ª–µ—Ç–µ–ª –≤ –±–∞–Ω. –í–µ—Ä–Ω—É—Å—å —á–µ—Ä–µ–∑ " + timetostr(need) + "</b>\n" + reason))
			self.set_time("banned", now + need + 60)
			logger.info("Got ban time. Waiting " + str(need))
			return

		# —Ä–µ—à–µ–Ω–∏–µ –∫–∞–ø—á–∏
		if "–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–¥ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏" in text:
			if stats.get("last_captcha", 0) + 180 > now:
				stats["captcha_pidorases"] = stats.get("captcha_pidorases", 0) + 1
			stats["last_captcha"] = now
			if stats.get("captcha_pidorases", 0) >= 2: # –ü–∏–¥–æ—Ä–∞—Å—ã –ø—Ä–∏—Å–ª–∞–ª–∏ 2 –∫–∞–ø—á–∏ –∏–ª–∏ –±–æ–ª—å—à–µ –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫
				if now > stats.get("captcha_reply", 0): # –ß—Ç–æ–±—ã –Ω–µ —Ñ–ª—É–¥–∏–ª
					stats["captcha_reply"] = now + 600
					phrase = settings_phrases.get("captcha_pidors")
					asyncio.ensure_future(self.send_bot(phrase))
				return # –ù—É –∏ –Ω–∞—Ö—É–π —Ä–µ—à–∞—Ç—å, –µ—Å–ª–∏ –≥–≥
			self.solving_captcha(True)
			code = await self.solve_captcha(message)
			asyncio.ensure_future(message.reply(code))
			self.solving_captcha(False)

		# –ï—â—ë –Ω–µ –ø–æ–ª—É—á–∏–ª –∏–Ω—Ñ—É
		if not stats.get("has"):
			return
		# –†–∞—Å—á—ë—Ç –¥–µ–π—Å—Ç–≤–∏–π

		if ", –≤—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–ª–∞–Ω" in text or ", –≤—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ" in text:
			stats["clan"] = True
		elif "–≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –≤ –∫–ª–∞–Ω!" in text:
			asyncio.ensure_future(self.send_bot("–ö–ª–∞–Ω –ø—Ä–∏–Ω—è—Ç—å"))
		elif ", –≤–≤–µ–¥–∏—Ç–µ ¬´–ø—Ä–∏–Ω—è—Ç—å [–Ω–æ–º–µ—Ä]¬ª" in text:
			asyncio.ensure_future(self.send_bot("–ö–ª–∞–Ω –ø—Ä–∏–Ω—è—Ç—å 1"))

		# –ú–æ–¥—É–ª—å —Ä–∞–±–æ—Ç—ã
		# –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
		if formats.get("work") in text:
			logger.info("Parsing job")
			print("parsing job")
			self.parsejob(text)
		elif ", —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –∑–∞–∫–æ–Ω—á–µ–Ω" in text:
			times["work"] = now + self.gen_time("work")

			# –ê–≤—Ç–æ–ø–æ–≤—ã—à–µ–Ω–∏–µ
		if settings.get("work"):
			if formats.get("work_new") in text:
				logger.info("Parsing new job")
				stats["new_job"] = True
				await self.send_bot("–£–≤–æ–ª–∏—Ç—å—Å—è")
				await self.send_bot("–†–∞–±–æ—Ç–∞")
			elif "–º–æ–∂–µ—Ç–µ —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ –æ–¥–Ω—É –∏–∑ —Ä–∞–±–æ—Ç:" in text:
				logger.info("looking job list")
				stats["new_job"] = True
				self.parsenewjob(text)
			elif stats.get("new_job") and ", –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏" in text:
				logger.info("looking job in job list")
				del stats["new_job"]
				self.parsenewjob(text)
			elif ", –≤—ã –Ω–∏–≥–¥–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ" in text:
				stats["new_job"] = True
				await self.send_bot("–†–∞–±–æ—Ç–∞")
			elif ", –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ" in text:
				reply_id = 0
				line = text.split("\n")[1]
				start = line.find("¬´")
				need = line[start+1:-1]
				for row in message.reply_markup.rows:
					buttons = row.buttons
					for but in buttons:
						text = but.text
						if text == need:
							await asyncio.sleep(.5)
							asyncio.ensure_future(message.click(reply_id))
							break
						reply_id += 1

		# –°–±–æ—Ä –∏–Ω—Ñ—ã –æ –ø–µ—Ç–∞—Ö
		if stats.get("pets_waiting"):
			msg = stats.get("pets_waiting")
			if ", —É –≤–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤" in text:
				asyncio.ensure_future(utils.answer(msg, "–ü–∏—Ç–æ–º—Ü–µ–≤ –Ω–µ—Ç—É"))
				del stats["pets_waiting"]
				del stats["pets_parsed"]
			elif "–í–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã [" in text:
				line = text.split("\n")[0]
				page_info = line.rsplit(" ", 1)[1]
				page_info = page_info.split("/")
				cur_page = page_info[0]
				arr = self.pets_parse(text)
				stats["pets_parsed"] = arr
					

				if cur_page == page_info[1][:-1]:
					arr = stats.get("pets_parsed")
					reply = "<b>üêæ –¢–æ–ø –ø–∏—Ç–æ–º—Ü—ã</b>"
					for info in arr:
						reply = reply + "\n" + "üÜî " + info.get("ID") + " | ‚ù§Ô∏è " + str(info.get("HP")) + " | üî´ " + str(info.get("DMG"))
					asyncio.ensure_future(utils.answer(msg, reply))
					del stats["pets_waiting"]
					del stats["pets_parsed"]
				else:
					asyncio.ensure_future(self.send_bot("–ü–∏—Ç–æ–º—Ü—ã " + str(int(cur_page) + 1)))

		# –ë–æ–Ω—É—Å
		for btext in formats.get("bonus"):
			if btext in text:
				self.parsebonus(text)
				logger.info("Parsing bonus")

		# –ê–≤—Ç–æ–≤–∞–ª—é—Ç–∞ –ø—Ä–µ–º–∏—É–º–∞
		if formats.get("bonus_money") in text:
			times["bonus_money"] = now + 5
			self.parsemoneybonus(text)
			logger.info("Parsing money bonus")

		# –ê–≤—Ç–æ–∑–∞–∫—É–ø –¥–ª—è –æ–≥—Ä–∞–±–ª–µ–Ω–∏–π
		if stats.get("need_to_buy") and ", –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è:" in text:
			msg = stats.get("need_to_buy")
			del stats["need_to_buy"]
			lines = text.split("\n")
			for line in lines:
				dot = line.find(".")
				if line[:1] == "üî∏" and dot != -1:
					await self.send_bot("–ü—Ä–µ–¥–º–µ—Ç—ã " + line[2:dot])
			await msg.reply("–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ")
		elif stats.get("need_to_buy") and ", —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–ª–∞–Ω–∞" in text:
			msg = stats.get("need_to_buy")
			del stats["need_to_buy"]
			await msg.reply("–î—É—Ä–∞–∫, –º–µ–Ω—è –≤ –∫–ª–∞–Ω–µ –Ω–µ—Ç—É")

		# –ê–≤—Ç–æ–±–æ–π –ø–∏—Ç–æ–º—Ü–µ–≤
		if "–≤–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏" in text or "–≤–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã –ø–æ–±–µ–¥–∏–ª–∏" in text:  # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –±–æ—è
			if not self.parsefights(text[1:]):
				times["fight"] = now + self.gen_time("fight")
				logger.info("Gonna start new fight soon")
		elif ", –≤—ã –Ω–∞–ø–∞–ª–∏ –Ω–∞ –∏–≥—Ä–æ–∫–∞" in text or ", —Ç–µ–∫—É—â–∏–π –±–æ–π:" in text or ", –í–∞—à–∏–º –ø–∏—Ç–æ–º—Ü–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–¥—ã—Ö" in text:
			self.set_time("fight", now + 60 * 10)
			logger.info("There is battle/waiting. Gonna wait 10 min before the fight")
		elif ", –Ω–∞–±–µ—Ä–∏—Ç–µ –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ –æ—Ç—Ä—è–¥ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã" in text or ", –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –±–∏—Ç–≤—ã –Ω—É–∂–Ω—ã –ø–∏—Ç–æ–º—Ü—ã" in text:
			stats["no_pets"] = True
			logger.info("I don't have pets. No sense for fighting")
		elif ", —Ç–µ–ø–µ—Ä—å –≤ –≤–∞—à–µ–º –æ—Ç—Ä—è–¥–µ" in text:
			times["fight"] = now + self.gen_time("fight")
			del stats["no_pets"]

		if settings.get("clan_heist"):
			if ", –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–≥—Ä–∞–±–ª–µ–Ω–∏–∏" in text: # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
				if "–≤—ã–±—Ä–∞–Ω –ø–ª–∞–Ω: –ø–ª–∞–Ω–∞ –Ω–µ—Ç" in text:
					lines = text.split("\n")
					last = lines[-1]
					timestr = last.rsplit(" ", 1)[1]
					if timestr and ":" in timestr:
						wait = convert(timestr)
						self.set_time("clan_heist", now + wait)
					asyncio.ensure_future(self.send_group("–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ –ø–ª–∞–Ω 1"))
					asyncio.ensure_future(self.send_group("–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ –ø–ª–∞–Ω 1"))
				elif "–æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞..." in text:
					asyncio.ensure_future(self.send_bot("–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç"))
				else:
					lines = text.split("\n")
					last = lines[-1]
					timestr = last.rsplit(" ", 1)[1]
					if timestr and ":" in timestr:
						wait = convert(timestr)
						self.set_time("clan_heist", now + wait + 60)
			elif ", –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è:"  in text: # –í—ã–±–æ—Ä –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è
				last = self.parse_last_entry(text) # –ò—â–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è
				asyncio.ensure_future(self.send_bot("–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ " + last)) # –ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ
			elif ", –≤—ã –Ω–∞—á–∞–ª–∏ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ" in text and "–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è" in text: # –í—ã–±–æ—Ä –ø–ª–∞–Ω–∞
				lines = text.split("\n")
				for ltext in lines:
					if "–≤—Ä–µ–º—è –Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É:" in text:
						timestr = ltext.rsplit(" ", 1)[1]
						if timestr and ":" in timestr:
							wait = convert(timestr)
							self.set_time("clan_heist", now + wait + 60)
				asyncio.ensure_future(self.send_group("–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ –ø–ª–∞–Ω 1"))
			elif ", –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!" in text or ", –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ —É–∂–µ –Ω–∞—á–∞–ª–æ—Å—å" in text: # –ü–æ—Å–ª–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç / –ö–æ–≥–¥–∞ —É–∂–µ –∏–¥—ë—Ç, –∞ —Ç—ã –ø—Ä–æ–ø–∏—Å–∞–ª —Å—Ç–∞—Ä—Ç
				line = text.split("\n")[1]
				timestr = line.rsplit(" ", 1)[1]
				if timestr and ":" in timestr:
					wait = convert(timestr)
					self.set_time("clan_heist", now + wait + 60)
			elif ", –≤ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å" in text:
				self.set_time("clan_heist", now + 3600)

		if settings.get("clan_war"):
			if ", –∫–ª–∞–Ω–æ–≤–∞—è –≤–æ–π–Ω–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞" in text:
				asyncio.ensure_future(self.send_bot("–ö–≤ —Å—Ç–∞—Ä—Ç"))
				self.set_time("clan_war", now + 60)
			elif ", –≤—ã –Ω–∞—á–∞–ª–∏ –ø–æ–∏—Å–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞!" in text:
				self.set_time("clan_war", now + 1800)
			elif ", –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–ª–∞–Ω–æ–≤–æ–π –≤–æ–π–Ω–µ:" in text or ", –∫–ª–∞–Ω–æ–≤–∞—è –≤–æ–π–Ω–∞:" in text: # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–ª–∏ —É–∂–µ —Å—Ä–∞–∂–µ–Ω–∏–µ
				if "–ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–±–æ—Ä–æ—á–Ω–æ–≥–æ —ç—Ç–∞–ø–∞:" in text:
					self.set_time("clan_war", now + 3600)
				elif "–¥–æ –∫–æ–Ω—Ü–∞ –æ—Ç–±–æ—Ä–æ—á–Ω–æ–≥–æ —ç—Ç–∞–ø–∞:" in text: # –ò–¥—ë—Ç —Å–±–æ—Ä –ø–∏—Ç–æ–º—Ü–µ–≤ —Å –±–æ—ë–≤. –ù—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∞–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤
					line = text.split("\n")[-1]
					timestr = line.rsplit(" ", 1)[1]
					if timestr and ":" in timestr:
						wait = convert(timestr)
						self.set_time("clan_war", now + wait + 60)
				elif "—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –±–∏—Ç–≤–∞ —á–µ—Ä–µ–∑:" in text:
					line = text.split("\n")[-2]
					timestr = line.rsplit(" ", 1)[1]
					print("check 1")
					if timestr and ":" in timestr:
						wait = convert(timestr)
						self.set_time("clan_war", now + wait + 60)
						upgrade = times.get("clan_war_upgrade")
						print("check 2")
						if now > upgrade and upgrade != 0:
							print("updating upgrade")
							if (wait - 600) > 0:
								self.set_time("clan_war_upgrade", now + wait - 600)
							else:
								self.set_time("clan_war_upgrade", 0)
							if "–¥–æ—Å—Ç—É–ø–Ω–æ –æ—á–∫–æ–≤ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π:" in text:
								print("using war points")
								await self.war_usepoints(text)
								times["clan_war"] = now + 600
								times["clan_war_upgrade"] = now + 600
						elif (now + wait - 600) > 0:
							self.set_time("clan_war_upgrade", now + wait - 600)
				elif "–∫–æ–Ω–µ—Ü –≤–æ–π–Ω—ã —á–µ—Ä–µ–∑:" in text: # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
					
					line = text.split("\n")[-2] # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∫–æ–Ω—Ü–∞ - –∫–æ–Ω–µ—Ü –≤–æ–π–Ω—ã
					timestr = line.rsplit(" ", 1)[1]
					if timestr and ":" in timestr:
						wait = convert(timestr)
						self.set_time("clan_war", now + wait + 60)

		if settings.get("opencase"):
			if ", —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–µ–π—Å–æ–≤ –∑–∞ —Ä–∞–∑, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ" in text: # –ù–∞ –ø—É—Å—Ç—ã—à–∫–∞—Ö –º–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ 1, –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
				logger.info("–ù–µ –º–æ–≥—É –æ—Ç–∫—Ä—ã—Ç—å –º–∞–∫—Å–∏–º—É–º –∫–µ–π—Å–æ–≤. –£–±–∏—Ä–∞—é —á–∏—Å–ª–æ")
				stats["opencase_limit"] = True
				times["opencase"] = now + self.gen_time("opencase")
			elif ", –≤–∞—à–∏ –∫–µ–π—Å—ã:" in text:
				# –ù—É–∂–Ω–æ —Å–ø–∞—Ä—Å–∏—Ç—å –∫–µ–π—Å—ã
				times["opencase"] = now + self.gen_time("opencase")
				stats["opencase"] = self.case_parse(text)
			elif ", —É –≤–∞—Å –Ω–µ—Ç –∫–µ–π—Å–æ–≤" in text:
				del stats["opencase"]
			elif ", –≤–∞–º –≤—ã–ø–∞–ª" in text and " –ø—Ä–µ–¥–º–µ—Ç" in text: # –í–∞–º –≤—ã–ø–∞–ª–æ 4 –ø—Ä–µ–¥–º–µ—Ç–∞ (3 –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ):
				self.set_time("opencase", now + self.gen_time("opencase"))
			elif ("üì¶ –≤–∞–º –≤—ã–ø–∞–ª" in text and " –∫–µ–π—Å" in text) or (", –≤–∞—à" in text and " –ø—Ä–∏–∑" in text and "–∫–µ–π—Å–æ–≤" in text): # –≤–∞–º –ø—ã–ø–∞–ª(–æ) 1(1) –∫–µ–π—Å(–æ–≤) / –≤–∞—à (VIP/–ü—Ä–µ–º) –ø—Ä–∏–∑ (–Ω–∞ —Å–µ–≥–æ–¥–Ω—è) ‚Äî 1(00) (–¥–æ–Ω–∞—Ç) –∫–µ–π—Å(–æ–≤)
				if not stats.get("opencase"):
					stats["opencase"] = 1

		# –°–±–æ—Ä –¥–µ–Ω–µ–≥ –≤ –±–∞–Ω–∫ –ø—Ä–∏ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–µ/–∞–≤—Ç–æ—Å—Ç–∞–∫–∞–Ω–µ
		if settings.get("auto_trade"):
			if "‚úÖ –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ +" in text:
				times["trade"] = now + self.gen_time("trade") + 1
				asyncio.ensure_future(self.send_bot("–ë–∞–Ω–∫ –ø–æ–ª–æ–∂–∏—Ç—å –≤—Å–µ"))
			elif "‚ùå  –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏" in text:
				times["trade"] = now + self.gen_time("trade")

		if settings.get("auto_cup"):
			if ", –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ø—Ä–∏–∑ " in text or ", –≤–µ—Ä–Ω–æ! –ø—Ä–∏–∑ " in text or ", –≤—ã —É–≥–∞–¥–∞–ª–∏! –ø—Ä–∏–∑ " in text:
				times["cup"] = now + self.gen_time("cup") + 1
				asyncio.ensure_future(self.send_bot("–ë–∞–Ω–∫ –ø–æ–ª–æ–∂–∏—Ç—å –≤—Å–µ"))
			elif ", –Ω–µ–≤–µ—Ä–Ω–æ, —ç—Ç–æ –±—ã–ª " in text and "-–π —Å—Ç–∞–∫–∞–Ω—á–∏–∫" in text:
				times["cup"] = now + self.gen_time("cup")
				# rel
		
		if settings.get("auto_casino"):
			if ", –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏" in text:
				times["casino"] = now + self.gen_time("casino")
			elif ", –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏" in text:
				asyncio.ensure_future(self.send_bot("–ë–∞–Ω–∫ –ø–æ–ª–æ–∂–∏—Ç—å –≤—Å–µ"))
				times["casino"] = now + self.gen_time("casino") + 1

		# –°–±–æ—Ä –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ—ã

		# –§–µ—Ä–º—ã
		if ", –≤—ã –∫—É–ø–∏–ª–∏ ¬´fm2018-bt200¬ª (x" in text:
			start = text.find("(x")
			end = text.find(")")
			amount = int(text[start+2:end])
			btc_farm_amount = stats.get("bitcoin_farms", 0) + amount
			stats["bitcoin_farms"] = btc_farm_amount
			stats["money"] = stats.get("money", 0) - amount * BITCOIN_FARM_PRICE

		# –î–µ–Ω—å–≥–∏ —Å –±–∞–ª–∞–Ω—Å–∞ 
		if ", –Ω–∞ —Ä—É–∫–∞—Ö " in text:
			lines = text.split("\n")
			for line in lines:
				money = line.rsplit(" ", 1)[1]
				if "–Ω–∞ —Ä—É–∫–∞—Ö" in line and "$" in money:
					money = convert_money(money)
					stats["money"] = money
				elif "üåê –±–∏—Ç–∫–æ–∏–Ω–æ–≤:" in line and "‚Çø" in money:
					btc = convert_money(money)
					stats["bitcoin"] = btc

		# –ü–µ—Ä–µ–¥–∞—á–∞ –¥–µ–Ω–µ–≥
		if "[–£–í–ï–î–û–ú–õ–ï–ù–ò–ï]" in text and "‚ñ∂Ô∏è –∏–≥—Ä–æ–∫" in text and "–ø–µ—Ä–µ–≤–µ–ª –≤–∞–º" in text: # –ü–æ–ª—É—á–µ–Ω–∏–µ
			line = text.split("\n")[1]
			money = line.rsplit(" ", 1)[1]
			if "$" in money:
				money = money[:-1] # —É–±–∏—Ä–∞–µ–º –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫
				money = convert_money(money)
				stats["money"] = stats.get("money", 0) + money
		elif ", –≤—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –∏–≥—Ä–æ–∫—É" in text and "$" in text: # –ü–µ—Ä–µ–¥–∞—á–∞
			if text[-1] != "$":
				text = text[:-2]
			money = line.rsplit(" ", 1)[1]
			if "$" in money:
				money = convert_money(money)
				stats["money"] = stats.get("money", 0) - money

		# –î–µ–Ω—å–≥–∏ —Å –∫–µ–π—Å–∞ –∏ —Ä–∞–±–æ—Ç—ã
		if ", –≤–∞–º –≤—ã–ø–∞–ª–æ" in text and "–≤–∞–ª—é—Ç–∞:" in text:
			lines = text.split("\n")
			for line in lines:
				if "–≤–∞–ª—é—Ç–∞:" in text:
					money = line.rsplit(" ", 1)[1]
					if "$" in money:
						money = convert_money(money)
						stats["money"] = stats.get("money", 0) + money
		elif ", –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏" in text:
			money = text.rsplit(" ", 1)[1]
			if "$" in money:
				money = convert_money(money)
				stats["money"] = stats.get("money", 0) + money
		elif (", —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥" in text or ", —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏—Ç–∫–æ–π–Ω–æ–≤" in text or ", —É –≤–∞—Å –º–∞–ª–æ –¥–µ–Ω–µ–≥ –¥–ª—è —ç—Ç–æ–π –ø–æ–∫—É–ø–∫–∏" in text) and settings.get("progress"):
			asyncio.ensure_future(self.send_bot("–ë–∞–ª–∞–Ω—Å"))

		# –î–µ–Ω—å–≥–∏ —Å –±–∏–∑–Ω–µ—Å–æ–≤
		if ", –≤—ã —Å–Ω—è–ª–∏ —Å–æ —Å—á—ë—Ç–∞ —Å–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞" in text:
			lines = text.split("\n")
			for line in lines:
				remove = "—É–±—ã—Ç–æ–∫" in line
				money = line.rsplit(" ", 1)[1]
				if "$" in money:
					money = convert_money(money)
					if remove:
						money = money * -1
					stats["money"] = stats.get("money", 0) + money

		# –ë–∏—Ç–∫–æ–∏–Ω—ã —Å —Ñ–µ—Ä–º—ã
		if ", –≤—ã —Å–æ–±—Ä–∞–ª–∏" in text and ", —Å–ª–µ–¥—É—é—â–∏–µ –±–∏—Ç–∫–æ–∏–Ω—ã –ø–æ—è–≤—è—Ç—Å—è —á–µ—Ä–µ–∑ —á–∞—Å" in text:
			line = text.split("\n")[1]
			if "üåê –±–∏—Ç–∫–æ–∏–Ω–æ–≤:" in line:
				money = line.rsplit(" ", 1)[1]
				btc = convert_money(money)
				stats["bitcoin"] = btc

		# –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è
		if ", —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø–∏—Ç–æ–º—Ü–µ–≤:" in text:
			stats["parsed_petshop"] = {}
			lines = text.split("\n")
			pets = False
			for line in lines:
				if line == "üè† –¥–æ–º–∏–∫–∏:":
					pets = True
				elif pets and "—É—Å–∏–ª–∏—Ç–µ–ª–∏" in line:
					pets = False
				if pets:
					last = line[-1:]
					if last == "‚Çø":
						start = line.find("‚Ññ")
						end = line.find("</strong>")
						num = line[start+1:end]
						price = convert_money(last)
						stats["parsed_petshop"][num] = price
		elif ", –≤—ã –∫—É–ø–∏–ª–∏ " in text and "–¥–ª—è —Å–≤–æ–∏—Ö –ø–∏—Ç–æ–º—Ü–µ–≤!" in text or ", –≤—ã —É–∂–µ –ø–æ–∫—É–ø–∞–ª–∏ —ç—Ç–æ—Ç –¥–æ–º–∏–∫" in text:
			del stats["parsed_petshop"]
					

	async def receivechat(self, message):  # —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ —Å –±–æ—Ç–æ–º
		global stats
		text = message.text.lower()
		user_id = message.from_id or 0

		if times.get("banned", None):
			if (text == "!–±–∞–Ω"):
				now = time()
				wait = times.get("banned") - now
				await utils.answer(message, "–û—Å—Ç–∞–ª–æ—Å—å " + timetostr(wait))
			return

		if (", –≤—ã –≤—ã–±—Ä–∞–ª–∏ –ø–ª–∞–Ω ‚Ññ" in text) and settings.get("clan_buy") and stats.get("clan") and user_id == lesya:
			stats["need_to_buy"] = message
			await self.send_bot("–ü—Ä–µ–¥–º–µ—Ç—ã")

		if (text == "!–∑–∞–∫—É–ø"):
			stats["need_to_buy"] = message
			await self.send_bot("–ü—Ä–µ–¥–º–µ—Ç—ã")
		elif (text == "!–ø–∏–Ω–≥"):
			await utils.answer(message, "–ñ–∏–≤, —Ü–µ–ª, –æ—Ä—ë–ª\n–ú–æ–π –∞–π–¥–∏ - " + stats.get("id"))
		elif (text[:6] == "!–ø—Ä–æ–º–æ"):
			promo = text[7:]			
			await utils.answer(message, "–ü—Ä–æ–º–æ " + promo)

	async def timer(self):
		while True:
			if not self in self.allmodules.modules:
				logger.fatal("AutoLesya unloaded. Breaking timer.")
				break
			global stats
			global times
			now = time()
			if stats.get("permaban"):
				continue
			if times.get("banned", None):
				if now > times.get("banned"):
					self.set_time("banned", 0)
					await self.send_bot("–ü—Ä–æ—Ñ–∏–ª—å")
				await asyncio.sleep(10)
				continue

			if stats.get("captcha"):
				continue

			if not stats.get("has"):
				await self.send_bot("–ü—Ä–æ—Ñ–∏–ª—å")
				logger.info("no stats")
				await asyncio.sleep(10)
				continue

			hour = int(strftime("%H"))
			sleep = False
			for sleep_name in sleep_hours:
				hours = sleep_hours.get(sleep_name)
				if hour >= hours[0] and hour <= hours[1]:
					sleep = True

			stats["info"] = True

			# –†–∞–±–æ—Ç–∞
			if settings.get("work") and now > times.get("work") and not sleep:
				logger.info("Time to Work")
				times["work"] = now + 30
				asyncio.ensure_future(self.send_bot("–†–∞–±–æ—Ç–∞—Ç—å"))


			# –ë–æ–Ω—É—Å—ã
			if settings.get("bonus") and not sleep:
				if now > times.get("bonus"):
					logger.info("Getting bonus")
					times["bonus"] = now + 600
					asyncio.ensure_future(self.send_bot("–ë–æ–Ω—É—Å"))
				if stats.get("vip") and now > times.get("vip_bonus"):
					logger.info("Getting vip bonus")
					times["vip_bonus"] = now + 600
					asyncio.ensure_future(self.send_bot("–í–∏–ø –±–æ–Ω—É—Å"))
				if stats.get("premium") and now > times.get("premium_bonus"):
					logger.info("Getting premium bonus")
					times["premium_bonus"] = now + 600
					asyncio.ensure_future(self.send_bot("–ü—Ä–µ–º–∏—É–º –±–æ–Ω—É—Å"))
				if stats.get("premium") and now > times.get("premium_money"):
					logger.info("Getting premium money")
					times["premium_money"] = now + 600
					asyncio.ensure_future(self.send_bot("–ü—Ä–µ–º–∏—É–º –≤–∞–ª—é—Ç–∞"))

			# –ê–≤—Ç–æ–∑–∞–∫—É–ø –¥–ª—è –ø–∏—Ç–æ–º—Ü–µ–≤
			if settings.get("pet_stimulator") and now > times.get("pet_stimulator") and not sleep:
				self.set_time("pet_stimulator", now + 60 * 60 * 24)
				self.get_bitcoins()
				asyncio.ensure_future(self.send_bot("–ó–æ–æ—Ç–æ–≤–∞—Ä—ã 6"))

			if settings.get("pet_food") and now > times.get("pet_food") and not sleep:
				self.set_time("pet_food", now + 60 * 60 * 24)
				self.get_bitcoins()
				asyncio.ensure_future(self.send_bot("–ó–æ–æ—Ç–æ–≤–∞—Ä—ã 7"))

			if settings.get("pet_cases") and now > times.get("pet_cases") and not sleep:
				self.set_time("pet_cases", now + 60 * 60 * 24)
				self.get_bitcoins()
				asyncio.ensure_future(self.send_bot("–ó–æ–æ—Ç–æ–≤–∞—Ä—ã 8"))

			# –ê–≤—Ç–æ–±–æ–π
			if settings.get("fight") and now > times.get("fight") and not stats.get("no_pets") and not sleep:
				times["fight"] = now + 30
				logger.info("Starting new battle")
				asyncio.ensure_future(self.send_bot("–ë–æ–π"))

			if settings.get("clan_heist") and now > times.get("clan_heist"):
				times["clan_heist"] = now + 600
				asyncio.ensure_future(self.send_bot("–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ"))

			if settings.get("clan_war"):
				upgrade = times.get("clan_war_upgrade")
				if now > upgrade and upgrade != 0:
					asyncio.ensure_future(self.send_bot("–ö–≤"))
				elif now > times.get("clan_war"):
					times["clan_war"] = now + 600
					asyncio.ensure_future(self.send_bot("–ö–í"))

			# –ê–≤—Ç–æ–æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–æ–≤
			if settings.get("opencase") and now > times.get("opencase") and stats.get("opencase") and not sleep:
				case = stats.get("opencase")
				times["opencase"] = now + self.gen_time("opencase")
				if stats.get("opencase_limit"):
					asyncio.ensure_future(self.send_bot("–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å " + str(case)))
				else:
					asyncio.ensure_future(self.send_bot("–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å " + str(case) + " 10"))

			if settings.get("humanizer") and now > times.get("humanizer") and not sleep:
				times["humanizer"] = now + self.gen_time("humanizer")
				self.send_phrase()

			# –ï—Å–ª–∏ –µ—Å—Ç—å –∞–ø–≥—Ä–µ–π–¥ –≥–æ—Ä–æ–¥–∞ - –º–µ—Ç–æ–¥ –ø–æ–¥–Ω—è—Ç–∏—è –¥–µ–Ω–µ–≥ –∏ –≤—ã–≤–æ–¥–∞ –≤ —Ç–æ–ø –∏ —Å–µ–±—è –∏ –∫–ª–∞–Ω–∞
			if settings.get("auto_trade") and now > times.get("trade") and not sleep:
				times["trade"] = now + 5
				side = randint(0, 1) == 1 and "–≤–≤–µ—Ä—Ö" or "–≤–Ω–∏–∑"
				asyncio.ensure_future(self.send_bot("–¢—Ä–µ–π–¥ " + side + " –≤—Å–µ"))

			if settings.get("auto_cup") and now > times.get("cup") and not sleep:
				times["cup"] = now + 5
				side = str(randint(1, 3))
				asyncio.ensure_future(self.send_bot("–°—Ç–∞–∫–∞–Ω—á–∏–∫ " + side + " –≤—Å–µ"))

			if settings.get("auto_casino") and now > times.get("casino") and not sleep:
				times["casino"] = now + 5
				asyncio.ensure_future(self.send_bot("–ö–∞–∑–∏–Ω–æ –≤—Å–µ"))

			if settings.get("progress") and now > times.get("progress") and not sleep:
				times["progress"] = now + 5
				if stats.get("bitcoin_farms", 0) < 1000 and stats.get("money", 0) > BITCOIN_FARM_PRICE:
					amount = floor(stats.get("money", 0) / BITCOIN_FARM_PRICE)
					asyncio.ensure_future(self.send_bot("–§–µ—Ä–º—ã 4 " + str(amount)))

				parsed_petshop = stats.get("parsed_petshop")
				if parsed_petshop is None:
					asyncio.ensure_future(self.send_bot("–ó–æ–æ—Ç–æ–≤–∞—Ä—ã"))
				elif parsed_petshop:
					for num in parsed_petshop:
						price = parsed_petshop.get(num)
						if stats.get("bitcoin", 0) > price:
							asyncio.ensure_future(self.send_bot("–ó–æ–æ—Ç–æ–≤–∞—Ä—ã " + str(num)))

			if settings.get("progress") and now > times.get("progress_collect") and not sleep:
				times["progress_collect"] = now + 10800
				if stats.get("bitcoin_farms", 0) > 0:
					asyncio.ensure_future(self.send_bot("–§–µ—Ä–º–∞"))

			await asyncio.sleep(1)

	async def watcher(self, message):
		if not isinstance(message, types.Message):
			return
		if not message.text:
			return
		if message.from_id == self._me.id:
			return
		chat_id = utils.get_chat_id(message)
		if chat_id == lesya and not times.get("banned", None):
			await self.receive(message)
		elif chat_id == lesya_chat:
			asyncio.ensure_future(self.receivechat(message))

	def db_set(self, key, value):
		self._db.set(__name__, key, value)

	def db_get(self, key, default=None):
		return self._db.get(__name__, key, default)
